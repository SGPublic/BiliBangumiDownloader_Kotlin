package io.github.sgpublic.bilidownload.service

import android.annotation.SuppressLint
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.graphics.BitmapFactory
import android.os.IBinder
import androidx.core.app.NotificationCompat
import androidx.lifecycle.LiveData
import androidx.lifecycle.Observer
import com.liulishuo.okdownload.DownloadContext
import com.liulishuo.okdownload.DownloadListener
import com.liulishuo.okdownload.DownloadTask
import com.liulishuo.okdownload.core.breakpoint.BreakpointInfo
import com.liulishuo.okdownload.core.cause.EndCause
import com.liulishuo.okdownload.core.cause.ResumeFailedCause
import io.github.sgpublic.bilidownload.Application
import io.github.sgpublic.bilidownload.R
import io.github.sgpublic.bilidownload.activity.Welcome
import io.github.sgpublic.bilidownload.base.CrashHandler
import io.github.sgpublic.bilidownload.core.data.parcelable.DashIndexJson
import io.github.sgpublic.bilidownload.core.data.parcelable.EntryJson
import io.github.sgpublic.bilidownload.core.manager.ConfigManager
import io.github.sgpublic.bilidownload.core.module.BaseAPI
import io.github.sgpublic.bilidownload.core.module.PlayModule
import io.github.sgpublic.bilidownload.core.util.MyLog
import io.github.sgpublic.bilidownload.room.entity.TaskEntity
import java.io.File

class DownloadService: Service() {
    override fun onCreate() {
        startForeground()
        listenTaskQueue()
    }

    private fun startForeground() {
        val channel = NotificationChannel(NOTIFICATION_CHANNEL_ID, Application.getString(R.string.app_service),
            NotificationManager.IMPORTANCE_NONE)
        val manager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        manager.createNotificationChannel(channel)
        val intent = Intent(this, Welcome::class.java)
        val notification = NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
            .setLargeIcon(BitmapFactory.decodeResource(applicationContext.resources,
                R.mipmap.ic_launcher))
            .setSmallIcon(R.mipmap.ic_launcher)
            .setContentIntent(PendingIntent.getActivity(this, 0, intent,
                PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_NO_CREATE))
            .setContentTitle(Application.getString(R.string.app_service))
            .setWhen(BaseAPI.TS)
            .build()
        startForeground(NOTIFICATION_ID, notification)
    }

    private lateinit var processingTasks: LiveData<List<TaskEntity>>
    private val processingTasksObserver = Observer<List<TaskEntity>> { processing ->
        val task = Application.DATABASE.TasksDao()
        val waitingTasks = task.getByTaskStatus(TaskEntity.STATUS_WAITING)
        if (processing.isNotEmpty()) {
            return@Observer
        }
        if (waitingTasks.isEmpty()) {
            stopSelf()
            return@Observer
        }
        val data = waitingTasks[0]
        if (data.status != TaskEntity.STATUS_PREPARING) {
            task.updateStatusByCid(data.cid, TaskEntity.STATUS_PREPARING)
        }
        val module = PlayModule(Application.APPLICATION_CONTEXT, ConfigManager.ACCESS_TOKEN, data.entry)
        module.getPlayUrl(object : PlayModule.Callback {
            override fun onFailure(code: Int, message: String?, e: Throwable?) {
                task.setErrorMessageByCid(data.cid, code, message ?: "未知错误")
            }
            override fun onResolvePlayData(entry: EntryJson, index: DashIndexJson) {
                download(data, entry, index)
            }
        })
    }

    private fun listenTaskQueue() {
        Application.DATABASE.TasksDao().run {
            processingTasks = listenByTaskStatus(TaskEntity.STATUS_PROCESSING).also {
                it.observeForever(processingTasksObserver)
            }
        }
    }

    @SuppressLint("CheckResult")
    private fun download(data: TaskEntity, entry: EntryJson, index: DashIndexJson) {
        val task = Application.DATABASE.TasksDao()
        try {
            data.entry = entry
            data.index = index
            val taskTag = entry.source.cid
            val basePath = ConfigManager.BASE_DIR.canonicalPath +
                    "/s_${entry.season_id}/" +
                    "${entry.ep.episode_id}"
            val tagPath = "$basePath/${entry.video_quality}"
            MyLog.d(basePath)
            File(basePath, "entry.json").writeAndClose(entry.toJson())
            File(tagPath, "index.json").writeAndClose(index.toJson())
            val download: DownloadContext.Builder = DownloadContext.QueueSet()
                .setMinIntervalMillisCallbackProcess(500)
                .setTag(entry.source.cid)
                .setPassIfAlreadyCompleted(true)
                .setAutoCallbackToUIThread(true)
                .setFlushBufferSize(4096)
                .setReadBufferSize(4096)
                .commit()
            val videoTask = DownloadTask.Builder(index.video.base_url,
                tagPath, "video.m4s")
                .setConnectionCount(1)
                .build().also {
                    it.tag = "${taskTag}_video"
                }
            download.bindSetTask(videoTask)
            val audioTask = DownloadTask.Builder(index.audio.base_url,
                tagPath, "audio.m4s")
                .setConnectionCount(1)
                .build().also {
                    it.tag = "${taskTag}_audio"
                }
            download.bindSetTask(audioTask)
            for (i in 0 until index.subtitles.size) {
                val subtitle = index.subtitles[i]
                val subtitleTask = DownloadTask.Builder(subtitle.subtitle_url,
                    tagPath, "${subtitle.lan}.json")
                    .setConnectionCount(1)
                    .build().also {
                        it.tag = "${taskTag}_subtitle_$i"
                    }
                download.bindSetTask(subtitleTask)
            }
            task.save(data.also {
                it.status = TaskEntity.STATUS_PROCESSING
            })
            download.build().startOnSerial(EmptyDownloadListener())
        } catch (e: Exception) {
            CrashHandler.saveExplosion(e, -1002, e.message ?: "未知错误")
            task.setErrorMessageByCid(entry.source.cid, -1002, e.message ?: "未知错误")
        }
    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }

    override fun onDestroy() {
        processingTasks.removeObserver(processingTasksObserver)
        stopForeground(true)
        super.onDestroy()
    }

    companion object {
        const val NOTIFICATION_CHANNEL_ID = "bilidl_download_service"
        const val NOTIFICATION_ID = 1

        class EmptyDownloadListener: DownloadListener {
            override fun taskStart(task: DownloadTask) {}
            override fun connectTrialStart(
                task: DownloadTask,
                requestHeaderFields: MutableMap<String, MutableList<String>>
            ) {}
            override fun connectTrialEnd(
                task: DownloadTask,
                responseCode: Int,
                responseHeaderFields: MutableMap<String, MutableList<String>>
            ) {}
            override fun downloadFromBeginning(
                task: DownloadTask,
                info: BreakpointInfo,
                cause: ResumeFailedCause
            ) {}
            override fun downloadFromBreakpoint(task: DownloadTask, info: BreakpointInfo) {}

            override fun connectStart(
                task: DownloadTask,
                blockIndex: Int,
                requestHeaderFields: MutableMap<String, MutableList<String>>
            ) {}
            override fun connectEnd(
                task: DownloadTask,
                blockIndex: Int,
                responseCode: Int,
                responseHeaderFields: MutableMap<String, MutableList<String>>
            ) {}
            override fun fetchStart(task: DownloadTask, blockIndex: Int, contentLength: Long) {}
            override fun fetchProgress(
                task: DownloadTask,
                blockIndex: Int,
                increaseBytes: Long
            ) {}
            override fun fetchEnd(task: DownloadTask, blockIndex: Int, contentLength: Long) {}
            override fun taskEnd(
                task: DownloadTask,
                cause: EndCause,
                realCause: java.lang.Exception?
            ) {}
        }
    }
}